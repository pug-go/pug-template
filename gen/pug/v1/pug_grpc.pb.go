// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: pug/v1/pug.proto

package pugv1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PugService_HelloPug_FullMethodName         = "/pug.v1.PugService/HelloPug"
	PugService_InternalHelloPug_FullMethodName = "/pug.v1.PugService/InternalHelloPug"
)

// PugServiceClient is the client API for PugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PugServiceClient interface {
	HelloPug(ctx context.Context, in *HelloPugRequest, opts ...grpc.CallOption) (*HelloPugResponse, error)
	InternalHelloPug(ctx context.Context, in *InternalHelloPugRequest, opts ...grpc.CallOption) (*InternalHelloPugResponse, error)
}

type pugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPugServiceClient(cc grpc.ClientConnInterface) PugServiceClient {
	return &pugServiceClient{cc}
}

func (c *pugServiceClient) HelloPug(ctx context.Context, in *HelloPugRequest, opts ...grpc.CallOption) (*HelloPugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloPugResponse)
	err := c.cc.Invoke(ctx, PugService_HelloPug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pugServiceClient) InternalHelloPug(ctx context.Context, in *InternalHelloPugRequest, opts ...grpc.CallOption) (*InternalHelloPugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalHelloPugResponse)
	err := c.cc.Invoke(ctx, PugService_InternalHelloPug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PugServiceServer is the server API for PugService service.
// All implementations must embed UnimplementedPugServiceServer
// for forward compatibility
type PugServiceServer interface {
	HelloPug(context.Context, *HelloPugRequest) (*HelloPugResponse, error)
	InternalHelloPug(context.Context, *InternalHelloPugRequest) (*InternalHelloPugResponse, error)
	mustEmbedUnimplementedPugServiceServer()
}

// UnimplementedPugServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPugServiceServer struct {
}

func (UnimplementedPugServiceServer) HelloPug(context.Context, *HelloPugRequest) (*HelloPugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloPug not implemented")
}
func (UnimplementedPugServiceServer) InternalHelloPug(context.Context, *InternalHelloPugRequest) (*InternalHelloPugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalHelloPug not implemented")
}
func (UnimplementedPugServiceServer) mustEmbedUnimplementedPugServiceServer() {}

// UnsafePugServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PugServiceServer will
// result in compilation errors.
type UnsafePugServiceServer interface {
	mustEmbedUnimplementedPugServiceServer()
}

func RegisterPugServiceServer(s grpc.ServiceRegistrar, srv PugServiceServer) {
	s.RegisterService(&PugService_ServiceDesc, srv)
}

func _PugService_HelloPug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloPugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PugServiceServer).HelloPug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PugService_HelloPug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PugServiceServer).HelloPug(ctx, req.(*HelloPugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PugService_InternalHelloPug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalHelloPugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PugServiceServer).InternalHelloPug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PugService_InternalHelloPug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PugServiceServer).InternalHelloPug(ctx, req.(*InternalHelloPugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PugService_ServiceDesc is the grpc.ServiceDesc for PugService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PugService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pug.v1.PugService",
	HandlerType: (*PugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloPug",
			Handler:    _PugService_HelloPug_Handler,
		},
		{
			MethodName: "InternalHelloPug",
			Handler:    _PugService_InternalHelloPug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pug/v1/pug.proto",
}
